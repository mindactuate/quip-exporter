{"version":3,"sources":["globalStore.js","config.js","App.jsx","serviceWorker.js","index.js","assets/pf_sq_low-res.jpg","assets/Logo_Quip-Exporter.png","assets/icon_donate.png","exporter/exporter.js"],"names":["globalStore","store","log","addToLog","string","unshift","Date","toLocaleString","clearLog","quipToken","zipFile","rootDir","exportPaused","donated","running","finished","numAPIcalls","config","quipHost","exporter","require","App","at","document","getElementById","value","startExporting","window","open","saveAs","id","valign","src","logo","alt","style","width","margin","avatar","href","target","donateIcon","type","name","height","autoComplete","color","onClick","hidden","downloadZip","backgroundColor","donateAndContinue","map","val","React","Component","view","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports","patiently","mdService","turndown","zipService","jszip","waiter","LimitWaiter","startWaitingCallback","res","console","endWaitingCallback","waitingTickCallback","minutelyLimit","hourlyLimit","msBetweenTwoCalls","test","clean","path","numAPICallsToPause","getUser","user","sharedFolderIds","sharedFolderChildren","Array","isArray","forEach","folderId","push","folder_id","sharedFolder","children","folder","title","getFolder","privateFolder","waterfallOverFolder","processObj","tree","callbackQueue","length","totalC","setTimeout","generateAsync","blob","callback","a","wait","url","default","axios","get","headers","Authorization","data","catch","err","JSON","stringify","message","response","status","iterator","nextItemIndex","cleanName","report","pop","str","tr","ä","ü","ö","ß","Ä","Ü","Ö","replace","$0","obj","Promise","resolve","interval","setInterval","clearInterval","hasOwnProperty","getThread","thread","threadName","threadFilePath","join","extractAndReplaceImgsInHTML","html","createHTMLAndMdFile","fetchDocxAndWriteToFile","threadId","threadTitle","m","images","rex","exec","imageFolderName","substr","imageFileName","imageFilePath","imageUrl","blobPath","fetchImageAndWriteToFile","responseType","imgString","Buffer","from","file","binary","shift","fileString","body"],"mappings":"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","file":"static/js/main.df9a5c50.chunk.js","sourcesContent":["import { store } from \"react-easy-state\";\r\n\r\nlet globalStore = store({\r\n  log: [],\r\n  addToLog: string => {\r\n    globalStore.log.unshift(`${new Date().toLocaleString()}: ${string}`);\r\n  },\r\n  clearLog: () => {\r\n    globalStore.log = [];\r\n  },\r\n  quipToken: \"\",\r\n  zipFile: null,\r\n  rootDir: null,\r\n  exportPaused: false,\r\n  donated: false,\r\n  running: false,\r\n    finished: false,\r\n  numAPIcalls: 0\r\n});\r\n\r\nexport default globalStore;\r\n","let config = {\r\n    quipHost: \"https://platform.quip.com/1/\"\r\n}\r\n\r\nexport default config;","import React from \"react\";\nimport { view } from \"react-easy-state\";\nimport globalStore from \"./globalStore\";\nimport avatar from \"./assets/pf_sq_low-res.jpg\";\nimport logo from \"./assets/Logo_Quip-Exporter.png\";\nimport donateIcon from \"./assets/icon_donate.png\";\nimport { saveAs } from \"file-saver\";\n\nlet exporter = require(\"./exporter/exporter\");\n\n// https://quip.com/api/personal-token\n\nclass App extends React.Component {\n  startExporting() {\n    let at = document.getElementById(\"accesstoken\").value;\n    exporter.startExporting(at);\n    // if (!at || at.length === 0) {\n    //   alert(\"Please provide a valid access token\");\n    // } else {\n    // }\n  }\n\n  donateAndContinue() {\n    window.open(\"https://www.paypal.me/mindactuate/1\", \"_blank\");\n    globalStore.exportPaused = false;\n  }\n\n  downloadZip() {\n    saveAs(globalStore.zipFile, globalStore.rootDir);\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"container\">\n          <div id=\"content-left\">\n            <h1>The Quip Exporter</h1>\n            <table>\n              <tbody>\n                <tr>\n                  <td valign=\"top\">\n                    <img\n                      src={logo}\n                      alt=\"logo\"\n                      style={{ width: \"80px\", margin: \"1em\" }}\n                    />\n                  </td>\n                  <td valign=\"top\">\n                    <p>\n                      Quip is a great tool to create well formatted documents on\n                      desktop as well as on mobile devices. Unfortunately it\n                      lacks two important features:\n                    </p>\n                    <ol>\n                      <li>To export all documents at once</li>\n                      <li>To export to html or md including image files</li>\n                    </ol>\n                    <p>This tool will perform a</p>\n                    <ul>\n                      <li>\n                        <span id=\"highlight\">full export</span> of your Quip\n                        account's{\" \"}\n                      </li>\n                      <li>\n                        <span id=\"highlight\">private &amp; shared folders</span>\n                        .\n                      </li>\n                    </ul>\n                    <p>The files will be exported as</p>\n                    <ul>\n                      <li>\n                        <span id=\"highlight\">HTML, md &amp; docx</span> files\n                      </li>\n                      <li>\n                        <span id=\"highlight\">including all of your images</span>\n                        .\n                      </li>\n                    </ul>\n                    <p>\n                      Please keep in mind that it will not loop through your\n                      recycle bin and starred folder.\n                    </p>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <h2>About me and ref to Github</h2>\n            <table>\n              <tbody>\n                <tr>\n                  <td valign=\"top\">\n                    <img\n                      src={avatar}\n                      alt=\"avatar\"\n                      style={{ width: \"80px\", margin: \"1em\" }}\n                    />\n                  </td>\n                  <td valign=\"top\">\n                    <p>\n                      My name is Daniel, I am a software engineer from Germany.\n                      Find me at Github under{\" \"}\n                      <a href=\"https://github.com/mindactuate\" target=\"blank\">\n                        github.com/mindactuate\n                      </a>{\" \"}\n                      or at dev.to under{\" \"}\n                      <a href=\"https://dev.to/mindactuate\" target=\"blank\">\n                        dev.to/mindactuate\n                      </a>\n                      .\n                      <br />\n                      <br />\n                      Or you can send me an email to dnlgrnr911[at]gmail.com.\n                      <br />\n                      <br />\n                      You can find the code repository of this app{\" \"}\n                      <a\n                        href=\"https://github.com/mindactuate/quip-exporter\"\n                        target=\"blank\"\n                      >\n                        here\n                      </a>\n                      .\n                    </p>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div id=\"content-right\">\n            <h2>Donating</h2>\n            <table>\n              <tbody>\n                <tr>\n                  <td valign=\"top\">\n                    <a\n                      href=\"https://www.paypal.me/mindactuate/1\"\n                      target=\"blank\"\n                    >\n                      <img\n                        src={donateIcon}\n                        alt=\"donateIcon\"\n                        style={{ width: \"80px\", margin: \"1em\" }}\n                      />\n                    </a>\n                  </td>\n                  <td valign=\"top\">\n                    <p>\n                      This app is a lot of work. Please consider donating just a\n                      little. :) You can{\" \"}\n                      <a\n                        href=\"https://www.paypal.me/mindactuate/1\"\n                        target=\"blank\"\n                      >\n                        paypal me\n                      </a>\n                      . That´s an effort of 5 seconds.\n                    </p>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <h2>Access token</h2>\n            <p>\n              Please get your Quip access token from{\" \"}\n              <a href=\"https://quip.com/dev/token\" target=\"blank\">\n                quip.com/dev/token\n              </a>{\" \"}\n              and paste it into the form input.\n              <br />\n              <br />\n              You can be sure that your token is used only locally in your web\n              browser and is not transmitted anywhere else but{\" \"}\n              <a\n                href=\"https://quip.com/dev/automation/documentation\"\n                target=\"blank\"\n              >\n                platform.quip.com\n              </a>\n              . Therefore you can check the network traffic with help of the\n              developer tools from your browser.\n            </p>\n            <div id=\"tokenform\">\n              <label>Quip Access token</label>\n              <br />\n              <input\n                type=\"text\"\n                id=\"accesstoken\"\n                name=\"accesstoken\"\n                style={{ width: \"100%\", height: \"30px\", margin: \"5px 5px 0\" }}\n                autoComplete=\"off\"\n              />\n            </div>\n            <h2>Start exporting</h2>\n            <p>\n              After hitting the button the exporter starts to export. Please\n              have an eye on the Logs. Depending on how many documents and how\n              many images you have, the export process can last multiple hours\n              or even days. The reason is that Quip limits the number of API\n              requests per minute and per hour for each API token. Please keep\n              this window open and your PC running.\n              <br />\n              <br />\n              <b style={{ color: \"red\" }}>\n                Do not close or refresh this window / tab while exporting.\n              </b>\n              <br />\n              <br /> After the export is complete you can download a zip (which\n              is generated and filled by your browser on the run.)\n            </p>\n            <input\n              type=\"button\"\n              value=\"Start exporting\"\n              style={{ width: \"100%\", height: \"50px\" }}\n              onClick={() => this.startExporting()}\n            />\n            <div hidden={!globalStore.running}>\n              <p>\n                <b style={{ color: \"limegreen\" }}>&#9679; Export running</b>\n              </p>\n            </div>\n            <div hidden={!globalStore.exportPaused}>\n              <p>\n                You exported <b>{globalStore.numAPIcalls}</b> documents and\n                images now.{\" \"}\n                <b>Please donate just a little to continue with the export.</b>{\" \"}\n                You can also download the current zip and have a look at the\n                files.\n              </p>\n              <input\n                type=\"button\"\n                value=\"Download zip\"\n                id=\"callToAction\"\n                onClick={() => this.downloadZip()}\n              />\n              <input\n                type=\"button\"\n                value=\"Donate and continue\"\n                id=\"callToAction\"\n                style={{ backgroundColor: \"gold\" }}\n                onClick={() => this.donateAndContinue()}\n              />\n            </div>\n            <div hidden={!globalStore.finished}>\n              <p>Your export is finished.</p>\n              <input\n                type=\"button\"\n                value=\"Download zip\"\n                style={{\n                  width: \"100%\",\n                  height: \"50px\",\n                  backgroundColor: \"gold\"\n                }}\n                onClick={() => this.downloadZip()}\n              />\n            </div>\n          </div>\n        </div>\n        <h2>Log</h2>\n        <div id=\"logarea\">\n          {globalStore.log.map(val => (\n            <pre>{val}</pre>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default view(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pf_sq_low-res.8e578ec0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Logo_Quip-Exporter.6b86c18a.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_donate.d16d81d4.png\";","import globalStore from \"../globalStore\";\r\nimport axios from \"axios\";\r\nimport turndown from \"turndown\";\r\nimport jszip from \"jszip\";\r\n\r\n// https://quip.com/api/personal-token\r\n\r\nconst patiently = require(\"patiently\");\r\n// const fs = require(\"file-system\");\r\n// const Path = require(\"path\");\r\nconst config = require(\"../config\");\r\n\r\nlet mdService = new turndown();\r\nlet zipService = new jszip();\r\n\r\nlet waiter = new patiently.LimitWaiter({\r\n  startWaitingCallback: res => console.log(res),\r\n  endWaitingCallback: res => console.log(res),\r\n  waitingTickCallback: res => console.log(res),\r\n  minutelyLimit: 50,\r\n  hourlyLimit: 750,\r\n  msBetweenTwoCalls: 0,\r\n  test: false\r\n});\r\n\r\nlet d = new Date();\r\nlet rootDir = clean(d.toLocaleString());\r\nvar path = [rootDir];\r\nlet numAPICallsToPause = 20;\r\n\r\nexport let startExporting = function(quipToken) {\r\n  if (quipToken) {\r\n    globalStore.running = true;\r\n    globalStore.quipToken = quipToken; // \"cache\" quip token\r\n    globalStore.addToLog(`Got access token: ${quipToken}`);\r\n    globalStore.addToLog(`Start exporting`);\r\n    getUser(user => {\r\n      let sharedFolderIds = user[\"shared_folder_ids\"];\r\n      let sharedFolderChildren = [];\r\n      if (Array.isArray(sharedFolderIds)) {\r\n        sharedFolderIds.forEach(folderId => {\r\n          sharedFolderChildren.push({ folder_id: folderId });\r\n        });\r\n      }\r\n      let sharedFolder = {\r\n        children: sharedFolderChildren,\r\n        folder: {\r\n          id: \"12345\",\r\n          title: \"Shared\"\r\n        }\r\n      };\r\n      getFolder(user[\"private_folder_id\"], privateFolder => {\r\n        console.log(\"loop over private folder docs\");\r\n        waterfallOverFolder(privateFolder, processObj, function(tree) {\r\n          console.log(\"In queue:\", waiter.callbackQueue.length);\r\n          console.log(\"loop over shared folders\");\r\n          waterfallOverFolder(sharedFolder, processObj, function(tree) {\r\n            globalStore.addToLog(\"Finished exporting\");\r\n            globalStore.addToLog(\"Used \" + waiter.totalC + \" api calls\");\r\n            globalStore.addToLog(\"Creating zip file\");\r\n\r\n            setTimeout(() => {\r\n              zipService.generateAsync({ type: \"blob\" }).then(function(blob) {\r\n                globalStore.addToLog(`Zip file ${rootDir} created`);\r\n                globalStore.zipFile = blob;\r\n                globalStore.rootDir = rootDir;\r\n                globalStore.finished = true;\r\n                globalStore.running = false;\r\n              });\r\n            }, 10000);\r\n          });\r\n        });\r\n      });\r\n    });\r\n  } else {\r\n    globalStore.addToLog(`No access token delivered`);\r\n    globalStore.addToLog(`Please deliver access token`);\r\n    globalStore.running = false;\r\n  }\r\n};\r\n\r\nlet getUser = async callback => {\r\n  waiter.wait(() => {\r\n    let url = `${config.default.quipHost}users/current`;\r\n    axios.default\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + globalStore.quipToken\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res && res.data) {\r\n          let user = res.data;\r\n          console.log(user);\r\n          globalStore.addToLog(\r\n            `Received user object with the user's name ${user.name}`\r\n          );\r\n          callback(user);\r\n        } else {\r\n          globalStore.addToLog(`No user object received`);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        globalStore.running = false;\r\n        globalStore.addToLog(\r\n          `Error while getting user: ${JSON.stringify(err.message)}`\r\n        );\r\n        if (\r\n          err.response &&\r\n          err.response.status &&\r\n          err.response.status === 401\r\n        ) {\r\n          globalStore.addToLog(\"Your access token seems to be invalid.\");\r\n        }\r\n      });\r\n  });\r\n};\r\n\r\nlet getFolder = async (id, callback) => {\r\n  waiter.wait(() => {\r\n    let url = `${config.default.quipHost}folders/${id}`;\r\n    axios.default\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + globalStore.quipToken\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res && res.data) {\r\n          let folder = res.data;\r\n          console.log(folder);\r\n          globalStore.addToLog(\r\n            `Start exporting folder with the title ${folder.folder.title}`\r\n          );\r\n          callback(folder);\r\n        } else {\r\n          globalStore.addToLog(`No folder object received`);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        globalStore.running = false;\r\n        globalStore.addToLog(\r\n          `Error while getting folder: ${JSON.stringify(err.message)}`\r\n        );\r\n        if (\r\n          err.response &&\r\n          err.response.status &&\r\n          err.response.status === 401\r\n        ) {\r\n          globalStore.addToLog(\"Your access token seems to be invalid.\");\r\n        }\r\n      });\r\n  });\r\n};\r\n\r\n// https://mostafa-samir.github.io/async-iterative-patterns-pt1/\r\nfunction waterfallOverFolder(folder, iterator, callback) {\r\n  var tree = {};\r\n  const id = folder.folder.id;\r\n  tree[id] = [];\r\n  var nextItemIndex = 0;\r\n  const length = folder.children.length;\r\n  const name = folder.folder.title;\r\n  const cleanName = clean(name);\r\n\r\n  path.push(cleanName);\r\n\r\n  // createFolder(path.join('/')); // folder will be generated directly in zip\r\n\r\n  function report(res) {\r\n    if (res) {\r\n      tree[id].push(res);\r\n    }\r\n    nextItemIndex++;\r\n    if (nextItemIndex === length) {\r\n      path.pop();\r\n      callback(tree);\r\n    } else {\r\n      iterator(folder.children[nextItemIndex], report);\r\n    }\r\n  }\r\n  iterator(folder.children[0], report);\r\n}\r\n\r\n// https://stackoverflow.com/questions/1909815/regex-to-compare-strings-with-umlaut-and-non-umlaut-variations\r\n// https://stackoverflow.com/questions/4374822/remove-all-special-characters-with-regexp\r\nfunction clean(str) {\r\n  let tr = { ä: \"ae\", ü: \"ue\", ö: \"oe\", ß: \"ss\", Ä: \"Ae\", Ü: \"Ue\", Ö: \"Oe\" };\r\n  let clean = str.replace(/[^A-Za-z0-9äöüÄÖÜß]/gi, \"\");\r\n  clean = clean.replace(/[äöüÄÖÜß]/g, function($0) {\r\n    return tr[$0];\r\n  });\r\n  return clean;\r\n}\r\n\r\nfunction waitForUnpause() {\r\n  return new Promise(resolve => {\r\n    let interval = setInterval(() => {\r\n      console.log(\"paused\", globalStore.exportPaused);\r\n      if (!globalStore.exportPaused) {\r\n        clearInterval(interval);\r\n        resolve();\r\n      }\r\n    }, 2000);\r\n  });\r\n}\r\n\r\n// iterator\r\nasync function processObj(obj, report) {\r\n  if (waiter.totalC > numAPICallsToPause && !globalStore.donated) {\r\n    if (!globalStore.zipFile) {\r\n      zipService.generateAsync({ type: \"blob\" }).then(function(blob) {\r\n        globalStore.addToLog(`Zip file ${rootDir}_demo created`);\r\n        globalStore.zipFile = blob;\r\n        globalStore.rootDir = rootDir + \"_demo\";\r\n        globalStore.exportPaused = true;\r\n        globalStore.numAPIcalls = waiter.totalC;\r\n        globalStore.running = false;\r\n      });\r\n    }\r\n    await waitForUnpause();\r\n    globalStore.running = true;\r\n  }\r\n  if (obj.hasOwnProperty(\"thread_id\")) {\r\n    getThread(obj[\"thread_id\"], thread => {\r\n      let threadName = clean(thread.thread.title);\r\n\r\n      path.push(threadName);\r\n      let threadFilePath = path.join(\"/\");\r\n      path.pop();\r\n\r\n      extractAndReplaceImgsInHTML(\r\n        thread.html,\r\n        thread.thread.id,\r\n        threadName,\r\n        html => {\r\n          createHTMLAndMdFile(threadFilePath, thread.thread.title, html);\r\n          fetchDocxAndWriteToFile(obj[\"thread_id\"], threadFilePath);\r\n          report(obj[\"thread_id\"]);\r\n        }\r\n      );\r\n    });\r\n  } else if (obj.hasOwnProperty(\"folder_id\")) {\r\n    getFolder(obj[\"folder_id\"], folder => {\r\n      // recursion\r\n      waterfallOverFolder(folder, processObj, function(tree) {\r\n        report(tree);\r\n      });\r\n    });\r\n  } else {\r\n    report(null);\r\n  }\r\n}\r\n\r\nlet getThread = async (id, callback) => {\r\n  waiter.wait(() => {\r\n    let url = `${config.default.quipHost}threads/${id}`;\r\n    axios.default\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + globalStore.quipToken\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res && res.data && res.data.thread) {\r\n          let thread = res.data;\r\n          globalStore.addToLog(\r\n            `Start exporting thread with the title ${clean(\r\n              thread.thread.title\r\n            )}`\r\n          );\r\n          callback(thread);\r\n        } else {\r\n          globalStore.addToLog(\r\n            `Lost thread with the id ${id}, please check with https://platform.quip.com/1/threads/${id}`\r\n          );\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        globalStore.addToLog(\r\n          `Error while getting thread: ${JSON.stringify(err.message)}`\r\n        );\r\n        if (\r\n          err.response &&\r\n          err.response.status &&\r\n          err.response.status === 401\r\n        ) {\r\n          globalStore.addToLog(\"Your access token seems to be invalid.\");\r\n        }\r\n      });\r\n  });\r\n};\r\n\r\nfunction extractAndReplaceImgsInHTML(html, threadId, threadTitle, callback) {\r\n  var m;\r\n  var images = [];\r\n\r\n  // https://stackoverflow.com/questions/14939296/extract-image-src-from-a-string\r\n  const rex = /<img.*?src='([^\">]*\\/([^\">]*?))'.*?>/gm;\r\n\r\n  while ((m = rex.exec(html))) {\r\n    let imageFolderName =\r\n      \"_images_\" + threadTitle.substr(0, 6) + \"_\" + threadId;\r\n    let imageFileName = threadTitle.substr(0, 6) + \"_\" + images.length + \".png\";\r\n\r\n    path.push(imageFolderName);\r\n    path.push(imageFileName);\r\n    let imageFilePath = path.join(\"/\");\r\n    path.pop();\r\n    path.pop();\r\n\r\n    let imageUrl = imageFolderName + \"/\" + imageFileName;\r\n\r\n    let blobPath = m[1];\r\n    blobPath = blobPath.substr(1, blobPath.length); // delete / at the beginning\r\n\r\n    images.push({\r\n      blobPath: blobPath,\r\n      imageUrl: imageUrl,\r\n      imageFilePath: imageFilePath\r\n    });\r\n\r\n    html = html.replace(m[1], imageUrl);\r\n  }\r\n\r\n  fetchImageAndWriteToFile(images, function() {\r\n    callback(html);\r\n  });\r\n}\r\n\r\nfunction fetchImageAndWriteToFile(images, callback) {\r\n  if (images.length > 0) {\r\n    let path = images[0].blobPath;\r\n    let imageFilePath = images[0].imageFilePath;\r\n\r\n    waiter.wait(() => {\r\n      let url = config.default.quipHost + path;\r\n      axios.default\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + globalStore.quipToken\r\n          },\r\n          responseType: \"arraybuffer\"\r\n        })\r\n        .then(res => {\r\n          let imgString = new Buffer.from(res.data, \"binary\");\r\n          zipService.file(imageFilePath, imgString, { binary: true });\r\n          globalStore.addToLog(`Image ${imageFilePath} written`);\r\n\r\n          images.shift();\r\n          fetchImageAndWriteToFile(images, callback);\r\n        })\r\n        .catch(err => {\r\n          globalStore.addToLog(\r\n            `Error while fetching image file ${imageFilePath}`\r\n          );\r\n\r\n          images.shift();\r\n          fetchImageAndWriteToFile(images, callback);\r\n        });\r\n    });\r\n  } else {\r\n    callback();\r\n  }\r\n}\r\n\r\nfunction fetchDocxAndWriteToFile(threadId, path) {\r\n  if (threadId) {\r\n    waiter.wait(() => {\r\n      let url = `${config.default.quipHost}threads/${threadId}/export/docx`;\r\n      axios.default\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + globalStore.quipToken\r\n          },\r\n          responseType: \"arraybuffer\"\r\n        })\r\n        .then(res => {\r\n          let fileString = new Buffer.from(res.data, \"binary\");\r\n          zipService.file(path + \".docx\", fileString, { binary: true });\r\n          globalStore.addToLog(`Docx ${path} written`);\r\n        })\r\n        .catch(err => {\r\n          globalStore.addToLog(`Error while fetching docx file ${path}`);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nfunction createHTMLAndMdFile(path, title, body) {\r\n  let html =\r\n    \"<!doctype html><html><head><title>\" +\r\n    title +\r\n    '</title><meta charset=\"UTF-8\"></head><body>';\r\n  html += body;\r\n  html += \"</body></html>\";\r\n  zipService.file(path + \".html\", html);\r\n  zipService.file(path + \".md\", mdService.turndown(html));\r\n  globalStore.addToLog(`Documents ${path}.md & .html written`);\r\n}\r\n"],"sourceRoot":""}